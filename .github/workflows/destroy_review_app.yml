name: Deploy review app

on:
  pull_request:
    types: [unlabeled]

jobs:
  destroy_review_app:
    name: Destroy review app
    runs-on: ubuntu-latest
    if: github.event.label.name == 'review app'
    env:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    defaults:
      run:
        working-directory: infra
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: terraform init -input=false
      - run: terraform workspace select tf-demo-preview-${{ github.event.pull_request.number }}
      - run: |
          terraform destroy -auto-approve -input=false \
            -var="cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -var="cloudflare_account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" \
            -var="app_subdomain=preview-${{ github.event.pull_request.number }}.tf" \
            -var="domain=albert.nz" \
            -var="environment_name=development"
      - name: Mark last deployment as inactive
        uses: actions/github-script@v6
        with:
          script: |
            const deploymentRequest = github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: "preview-${{ github.event.pull_request.number }}"
            }).sort((a,b) => new Date(b.updated_at) - new Date(a.updated_at))
            const deployments = github.paginate(deploymentRequest)

            const latest = deployments[0]?.id

            if (latest) {
              github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "inactive"
              })
            }
